# Multi-stage build para otimização
FROM --platform=$BUILDPLATFORM node:18-alpine AS builder

# Instalar dependências de build
RUN apk add --no-cache git

# Criar diretório de trabalho
WORKDIR /app

# Copiar arquivos de configuração
COPY package*.json ./

# Instalar dependências
RUN npm ci --only=production

# Estágio final - Nginx para servir arquivos estáticos
FROM --platform=$TARGETPLATFORM nginx:alpine

# Instalar curl para health checks
RUN apk add --no-cache curl

# Remover configuração padrão do nginx
RUN rm /etc/nginx/conf.d/default.conf

# Copiar configuração personalizada do nginx
COPY nginx.conf /etc/nginx/conf.d/

# Copiar arquivos da aplicação
COPY src/ /usr/share/nginx/html/

# Copiar dependências do estágio anterior (se necessário)
COPY --from=builder /app/node_modules /usr/share/nginx/html/node_modules

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -G nginx-user && \
    chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/log/nginx && \
    chown -R nginx-user:nginx-user /etc/nginx/conf.d

# Expor porta
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Rodar como usuário não-root
USER nginx-user

# Comando para iniciar nginx
CMD ["nginx", "-g", "daemon off;"]